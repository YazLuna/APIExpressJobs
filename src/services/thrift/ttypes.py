#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class Resource(object):
    """
    Attributes:
     - idResource
     - routeSave
     - isMainResource
     - name
     - idService
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'idResource', None, None, ),  # 1
        (2, TType.STRING, 'routeSave', 'UTF8', None, ),  # 2
        (3, TType.BOOL, 'isMainResource', None, None, ),  # 3
        (4, TType.STRING, 'name', 'UTF8', None, ),  # 4
        (5, TType.I32, 'idService', None, None, ),  # 5
    )

    def __init__(self, idResource=None, routeSave=None, isMainResource=None, name=None, idService=None,):
        self.idResource = idResource
        self.routeSave = routeSave
        self.isMainResource = isMainResource
        self.name = name
        self.idService = idService

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.idResource = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.routeSave = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isMainResource = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.idService = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Resource')
        if self.idResource is not None:
            oprot.writeFieldBegin('idResource', TType.I32, 1)
            oprot.writeI32(self.idResource)
            oprot.writeFieldEnd()
        if self.routeSave is not None:
            oprot.writeFieldBegin('routeSave', TType.STRING, 2)
            oprot.writeString(self.routeSave.encode('utf-8') if sys.version_info[0] == 2 else self.routeSave)
            oprot.writeFieldEnd()
        if self.isMainResource is not None:
            oprot.writeFieldBegin('isMainResource', TType.BOOL, 3)
            oprot.writeBool(self.isMainResource)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 4)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.idService is not None:
            oprot.writeFieldBegin('idService', TType.I32, 5)
            oprot.writeI32(self.idService)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
