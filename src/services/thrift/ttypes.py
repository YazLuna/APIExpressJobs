#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class AccountStatus(object):
    ACTIVE = 1
    INACTIVE = 2

    _VALUES_TO_NAMES = {
        1: "ACTIVE",
        2: "INACTIVE",
    }

    _NAMES_TO_VALUES = {
        "ACTIVE": 1,
        "INACTIVE": 2,
    }


class AccountType(object):
    CLIENT = 1
    EMPLOYEE = 2

    _VALUES_TO_NAMES = {
        1: "CLIENT",
        2: "EMPLOYEE",
    }

    _NAMES_TO_VALUES = {
        "CLIENT": 1,
        "EMPLOYEE": 2,
    }


class ServiceStatus(object):
    ACTIVE = 1
    DELETED = 2

    _VALUES_TO_NAMES = {
        1: "ACTIVE",
        2: "DELETED",
    }

    _NAMES_TO_VALUES = {
        "ACTIVE": 1,
        "DELETED": 2,
    }


class RequestStatus(object):
    REQUEST = 1
    ACCEPTED = 2
    REJECTED = 3
    CANCELLED = 4

    _VALUES_TO_NAMES = {
        1: "REQUEST",
        2: "ACCEPTED",
        3: "REJECTED",
        4: "CANCELLED",
    }

    _NAMES_TO_VALUES = {
        "REQUEST": 1,
        "ACCEPTED": 2,
        "REJECTED": 3,
        "CANCELLED": 4,
    }


class Date(object):
    """
    Attributes:
     - day
     - month
     - year
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'day', None, None, ),  # 1
        (2, TType.I32, 'month', None, None, ),  # 2
        (3, TType.I32, 'year', None, None, ),  # 3
    )

    def __init__(self, day=None, month=None, year=None,):
        self.day = day
        self.month = month
        self.year = year

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.day = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.month = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.year = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Date')
        if self.day is not None:
            oprot.writeFieldBegin('day', TType.I32, 1)
            oprot.writeI32(self.day)
            oprot.writeFieldEnd()
        if self.month is not None:
            oprot.writeFieldBegin('month', TType.I32, 2)
            oprot.writeI32(self.month)
            oprot.writeFieldEnd()
        if self.year is not None:
            oprot.writeFieldBegin('year', TType.I32, 3)
            oprot.writeI32(self.year)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Time(object):
    """
    Attributes:
     - hour
     - minutes
     - seconds
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'hour', None, None, ),  # 1
        (2, TType.I32, 'minutes', None, None, ),  # 2
        (3, TType.I32, 'seconds', None, None, ),  # 3
    )

    def __init__(self, hour=None, minutes=None, seconds=None,):
        self.hour = hour
        self.minutes = minutes
        self.seconds = seconds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.hour = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.minutes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.seconds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Time')
        if self.hour is not None:
            oprot.writeFieldBegin('hour', TType.I32, 1)
            oprot.writeI32(self.hour)
            oprot.writeFieldEnd()
        if self.minutes is not None:
            oprot.writeFieldBegin('minutes', TType.I32, 2)
            oprot.writeI32(self.minutes)
            oprot.writeFieldEnd()
        if self.seconds is not None:
            oprot.writeFieldBegin('seconds', TType.I32, 3)
            oprot.writeI32(self.seconds)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AccountRegistry(object):
    """
    Attributes:
     - userName
     - password
     - accountStatus
     - accountType
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userName', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
        (3, TType.I32, 'accountStatus', None, None, ),  # 3
        (4, TType.I32, 'accountType', None, None, ),  # 4
    )

    def __init__(self, userName=None, password=None, accountStatus=None, accountType=None,):
        self.userName = userName
        self.password = password
        self.accountStatus = accountStatus
        self.accountType = accountType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.accountStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.accountType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AccountRegistry')
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 1)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.accountStatus is not None:
            oprot.writeFieldBegin('accountStatus', TType.I32, 3)
            oprot.writeI32(self.accountStatus)
            oprot.writeFieldEnd()
        if self.accountType is not None:
            oprot.writeFieldBegin('accountType', TType.I32, 4)
            oprot.writeI32(self.accountType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MemberATERegistryUpdate(object):
    """
    Attributes:
     - email
     - name
     - lastName
     - dateBirth
     - account
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'lastName', 'UTF8', None, ),  # 3
        (4, TType.STRUCT, 'dateBirth', (Date, Date.thrift_spec), None, ),  # 4
        (5, TType.STRUCT, 'account', (AccountRegistry, AccountRegistry.thrift_spec), None, ),  # 5
    )

    def __init__(self, email=None, name=None, lastName=None, dateBirth=None, account=None,):
        self.email = email
        self.name = name
        self.lastName = lastName
        self.dateBirth = dateBirth
        self.account = account

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.lastName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.dateBirth = Date()
                    self.dateBirth.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.account = AccountRegistry()
                    self.account.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('MemberATERegistryUpdate')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.lastName is not None:
            oprot.writeFieldBegin('lastName', TType.STRING, 3)
            oprot.writeString(self.lastName.encode('utf-8') if sys.version_info[0] == 2 else self.lastName)
            oprot.writeFieldEnd()
        if self.dateBirth is not None:
            oprot.writeFieldBegin('dateBirth', TType.STRUCT, 4)
            self.dateBirth.write(oprot)
            oprot.writeFieldEnd()
        if self.account is not None:
            oprot.writeFieldBegin('account', TType.STRUCT, 5)
            self.account.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AccountDelete(object):
    """
    Attributes:
     - accountStatus
     - idAccount
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'accountStatus', None, None, ),  # 1
        (2, TType.I32, 'idAccount', None, None, ),  # 2
    )

    def __init__(self, accountStatus=None, idAccount=None,):
        self.accountStatus = accountStatus
        self.idAccount = idAccount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.accountStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.idAccount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AccountDelete')
        if self.accountStatus is not None:
            oprot.writeFieldBegin('accountStatus', TType.I32, 1)
            oprot.writeI32(self.accountStatus)
            oprot.writeFieldEnd()
        if self.idAccount is not None:
            oprot.writeFieldBegin('idAccount', TType.I32, 2)
            oprot.writeI32(self.idAccount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Resource(object):
    """
    Attributes:
     - routeSave
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'routeSave', 'UTF8', None, ),  # 1
    )

    def __init__(self, routeSave=None,):
        self.routeSave = routeSave

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.routeSave = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Resource')
        if self.routeSave is not None:
            oprot.writeFieldBegin('routeSave', TType.STRING, 1)
            oprot.writeString(self.routeSave.encode('utf-8') if sys.version_info[0] == 2 else self.routeSave)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServiceRegistryUpdate(object):
    """
    Attributes:
     - name
     - slogan
     - cost
     - description
     - location
     - workinghours
     - typeService
     - serviceStatus
     - resources
     - email
     - idService
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'slogan', 'UTF8', None, ),  # 2
        (3, TType.DOUBLE, 'cost', None, None, ),  # 3
        (4, TType.STRING, 'description', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'location', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'workinghours', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'typeService', 'UTF8', None, ),  # 7
        (8, TType.I32, 'serviceStatus', None, None, ),  # 8
        (9, TType.LIST, 'resources', (TType.STRUCT, (Resource, Resource.thrift_spec), False), None, ),  # 9
        (10, TType.STRING, 'email', 'UTF8', None, ),  # 10
        (11, TType.I32, 'idService', None, None, ),  # 11
    )

    def __init__(self, name=None, slogan=None, cost=None, description=None, location=None, workinghours=None, typeService=None, serviceStatus=None, resources=None, email=None, idService=None,):
        self.name = name
        self.slogan = slogan
        self.cost = cost
        self.description = description
        self.location = location
        self.workinghours = workinghours
        self.typeService = typeService
        self.serviceStatus = serviceStatus
        self.resources = resources
        self.email = email
        self.idService = idService

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.slogan = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.location = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.workinghours = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.typeService = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.serviceStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.resources = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Resource()
                        _elem5.read(iprot)
                        self.resources.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.idService = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ServiceRegistryUpdate')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.slogan is not None:
            oprot.writeFieldBegin('slogan', TType.STRING, 2)
            oprot.writeString(self.slogan.encode('utf-8') if sys.version_info[0] == 2 else self.slogan)
            oprot.writeFieldEnd()
        if self.cost is not None:
            oprot.writeFieldBegin('cost', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 4)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRING, 5)
            oprot.writeString(self.location.encode('utf-8') if sys.version_info[0] == 2 else self.location)
            oprot.writeFieldEnd()
        if self.workinghours is not None:
            oprot.writeFieldBegin('workinghours', TType.STRING, 6)
            oprot.writeString(self.workinghours.encode('utf-8') if sys.version_info[0] == 2 else self.workinghours)
            oprot.writeFieldEnd()
        if self.typeService is not None:
            oprot.writeFieldBegin('typeService', TType.STRING, 7)
            oprot.writeString(self.typeService.encode('utf-8') if sys.version_info[0] == 2 else self.typeService)
            oprot.writeFieldEnd()
        if self.serviceStatus is not None:
            oprot.writeFieldBegin('serviceStatus', TType.I32, 8)
            oprot.writeI32(self.serviceStatus)
            oprot.writeFieldEnd()
        if self.resources is not None:
            oprot.writeFieldBegin('resources', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.resources))
            for iter6 in self.resources:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 10)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.idService is not None:
            oprot.writeFieldBegin('idService', TType.I32, 11)
            oprot.writeI32(self.idService)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServiceDelete(object):
    """
    Attributes:
     - serviceStatus
     - email
     - idService
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'serviceStatus', None, None, ),  # 1
        (2, TType.STRING, 'email', 'UTF8', None, ),  # 2
        (3, TType.I32, 'idService', None, None, ),  # 3
    )

    def __init__(self, serviceStatus=None, email=None, idService=None,):
        self.serviceStatus = serviceStatus
        self.email = email
        self.idService = idService

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.serviceStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.idService = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ServiceDelete')
        if self.serviceStatus is not None:
            oprot.writeFieldBegin('serviceStatus', TType.I32, 1)
            oprot.writeI32(self.serviceStatus)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 2)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.idService is not None:
            oprot.writeFieldBegin('idService', TType.I32, 3)
            oprot.writeI32(self.idService)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServiceResources(object):
    """
    Attributes:
     - resources
     - email
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'resources', (TType.STRUCT, (Resource, Resource.thrift_spec), False), None, ),  # 1
        (2, TType.STRING, 'email', 'UTF8', None, ),  # 2
    )

    def __init__(self, resources=None, email=None,):
        self.resources = resources
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.resources = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = Resource()
                        _elem12.read(iprot)
                        self.resources.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ServiceResources')
        if self.resources is not None:
            oprot.writeFieldBegin('resources', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.resources))
            for iter13 in self.resources:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 2)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Message(object):
    """
    Attributes:
     - message
     - email
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'email', 'UTF8', None, ),  # 2
    )

    def __init__(self, message=None, email=None,):
        self.message = message
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Message')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 2)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Chat(object):
    """
    Attributes:
     - messageClient
     - messageEmployee
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'messageClient', (TType.STRUCT, (Message, Message.thrift_spec), False), None, ),  # 1
        (2, TType.LIST, 'messageEmployee', (TType.STRUCT, (Message, Message.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, messageClient=None, messageEmployee=None,):
        self.messageClient = messageClient
        self.messageEmployee = messageEmployee

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.messageClient = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = Message()
                        _elem19.read(iprot)
                        self.messageClient.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.messageEmployee = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = Message()
                        _elem25.read(iprot)
                        self.messageEmployee.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Chat')
        if self.messageClient is not None:
            oprot.writeFieldBegin('messageClient', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.messageClient))
            for iter26 in self.messageClient:
                iter26.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.messageEmployee is not None:
            oprot.writeFieldBegin('messageEmployee', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.messageEmployee))
            for iter27 in self.messageEmployee:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Report(object):
    """
    Attributes:
     - reason
     - email
     - idService
     - idReport
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'reason', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'email', 'UTF8', None, ),  # 2
        (3, TType.I32, 'idService', None, None, ),  # 3
        (4, TType.I32, 'idReport', None, None, ),  # 4
    )

    def __init__(self, reason=None, email=None, idService=None, idReport=None,):
        self.reason = reason
        self.email = email
        self.idService = idService
        self.idReport = idReport

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.idService = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.idReport = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Report')
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 1)
            oprot.writeString(self.reason.encode('utf-8') if sys.version_info[0] == 2 else self.reason)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 2)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.idService is not None:
            oprot.writeFieldBegin('idService', TType.I32, 3)
            oprot.writeI32(self.idService)
            oprot.writeFieldEnd()
        if self.idReport is not None:
            oprot.writeFieldBegin('idReport', TType.I32, 4)
            oprot.writeI32(self.idReport)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RequestRegistry(object):
    """
    Attributes:
     - addres
     - date
     - ratingEmployee
     - ratingClient
     - trouble
     - time
     - requestStatus
     - emailMemberRequest
     - idServiceRequested
     - idReport
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'addres', 'UTF8', None, ),  # 1
        (2, TType.STRUCT, 'date', (Date, Date.thrift_spec), None, ),  # 2
        (3, TType.I32, 'ratingEmployee', None, None, ),  # 3
        (4, TType.I32, 'ratingClient', None, None, ),  # 4
        (5, TType.STRING, 'trouble', 'UTF8', None, ),  # 5
        (6, TType.STRUCT, 'time', (Time, Time.thrift_spec), None, ),  # 6
        (7, TType.I32, 'requestStatus', None, None, ),  # 7
        (8, TType.STRING, 'emailMemberRequest', 'UTF8', None, ),  # 8
        (9, TType.I32, 'idServiceRequested', None, None, ),  # 9
        (10, TType.I32, 'idReport', None, None, ),  # 10
    )

    def __init__(self, addres=None, date=None, ratingEmployee=None, ratingClient=None, trouble=None, time=None, requestStatus=None, emailMemberRequest=None, idServiceRequested=None, idReport=None,):
        self.addres = addres
        self.date = date
        self.ratingEmployee = ratingEmployee
        self.ratingClient = ratingClient
        self.trouble = trouble
        self.time = time
        self.requestStatus = requestStatus
        self.emailMemberRequest = emailMemberRequest
        self.idServiceRequested = idServiceRequested
        self.idReport = idReport

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.addres = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.date = Date()
                    self.date.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.ratingEmployee = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.ratingClient = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.trouble = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.time = Time()
                    self.time.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.requestStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.emailMemberRequest = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.idServiceRequested = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.idReport = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RequestRegistry')
        if self.addres is not None:
            oprot.writeFieldBegin('addres', TType.STRING, 1)
            oprot.writeString(self.addres.encode('utf-8') if sys.version_info[0] == 2 else self.addres)
            oprot.writeFieldEnd()
        if self.date is not None:
            oprot.writeFieldBegin('date', TType.STRUCT, 2)
            self.date.write(oprot)
            oprot.writeFieldEnd()
        if self.ratingEmployee is not None:
            oprot.writeFieldBegin('ratingEmployee', TType.I32, 3)
            oprot.writeI32(self.ratingEmployee)
            oprot.writeFieldEnd()
        if self.ratingClient is not None:
            oprot.writeFieldBegin('ratingClient', TType.I32, 4)
            oprot.writeI32(self.ratingClient)
            oprot.writeFieldEnd()
        if self.trouble is not None:
            oprot.writeFieldBegin('trouble', TType.STRING, 5)
            oprot.writeString(self.trouble.encode('utf-8') if sys.version_info[0] == 2 else self.trouble)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.STRUCT, 6)
            self.time.write(oprot)
            oprot.writeFieldEnd()
        if self.requestStatus is not None:
            oprot.writeFieldBegin('requestStatus', TType.I32, 7)
            oprot.writeI32(self.requestStatus)
            oprot.writeFieldEnd()
        if self.emailMemberRequest is not None:
            oprot.writeFieldBegin('emailMemberRequest', TType.STRING, 8)
            oprot.writeString(self.emailMemberRequest.encode('utf-8') if sys.version_info[0] == 2 else self.emailMemberRequest)
            oprot.writeFieldEnd()
        if self.idServiceRequested is not None:
            oprot.writeFieldBegin('idServiceRequested', TType.I32, 9)
            oprot.writeI32(self.idServiceRequested)
            oprot.writeFieldEnd()
        if self.idReport is not None:
            oprot.writeFieldBegin('idReport', TType.I32, 10)
            oprot.writeI32(self.idReport)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RequestUpdateStatus(object):
    """
    Attributes:
     - requestStatus
     - idReport
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'requestStatus', None, None, ),  # 1
        (2, TType.I32, 'idReport', None, None, ),  # 2
    )

    def __init__(self, requestStatus=None, idReport=None,):
        self.requestStatus = requestStatus
        self.idReport = idReport

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requestStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.idReport = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RequestUpdateStatus')
        if self.requestStatus is not None:
            oprot.writeFieldBegin('requestStatus', TType.I32, 1)
            oprot.writeI32(self.requestStatus)
            oprot.writeFieldEnd()
        if self.idReport is not None:
            oprot.writeFieldBegin('idReport', TType.I32, 2)
            oprot.writeI32(self.idReport)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
