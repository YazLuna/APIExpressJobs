# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.communication_structs.base_model_ import Model
from src.communication_structs.member_ate import MemberATE  # noqa: F401,E501
from src.communication_structs.service import Service  # noqa: F401,E501
from src.routes import util


class Request(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, address: str=None, _date: date=None, request_status: str=None, time: str=None, trouble: str=None, member_ate: MemberATE=None, service: Service=None):  # noqa: E501
        """Request - a model defined in Swagger

        :param id: The id of this Request.  # noqa: E501
        :type id: int
        :param address: The address of this Request.  # noqa: E501
        :type address: str
        :param _date: The _date of this Request.  # noqa: E501
        :type _date: date
        :param request_status: The request_status of this Request.  # noqa: E501
        :type request_status: str
        :param time: The time of this Request.  # noqa: E501
        :type time: str
        :param trouble: The trouble of this Request.  # noqa: E501
        :type trouble: str
        :param member_ate: The member_ate of this Request.  # noqa: E501
        :type member_ate: MemberATE
        :param service: The service of this Request.  # noqa: E501
        :type service: Service
        """
        self.swagger_types = {
            'id': int,
            'address': str,
            '_date': date,
            'request_status': str,
            'time': str,
            'trouble': str,
            'member_ate': MemberATE,
            'service': Service
        }

        self.attribute_map = {
            'id': 'id',
            'address': 'address',
            '_date': 'date',
            'request_status': 'requestStatus',
            'time': 'time',
            'trouble': 'trouble',
            'member_ate': 'memberATE',
            'service': 'service'
        }
        self._id = id
        self._address = address
        self.__date = _date
        self._request_status = request_status
        self._time = time
        self._trouble = trouble
        self._member_ate = member_ate
        self._service = service

    @classmethod
    def from_dict(cls, dikt) -> 'Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Request of this Request.  # noqa: E501
        :rtype: Request
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Request.

        ID of request  # noqa: E501

        :return: The id of this Request.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Request.

        ID of request  # noqa: E501

        :param id: The id of this Request.
        :type id: int
        """

        self._id = id

    @property
    def address(self) -> str:
        """Gets the address of this Request.

        client address  # noqa: E501

        :return: The address of this Request.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this Request.

        client address  # noqa: E501

        :param address: The address of this Request.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def _date(self) -> date:
        """Gets the _date of this Request.

        Date the service is to be performed  # noqa: E501

        :return: The _date of this Request.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date: date):
        """Sets the _date of this Request.

        Date the service is to be performed  # noqa: E501

        :param _date: The _date of this Request.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def request_status(self) -> str:
        """Gets the request_status of this Request.

        status of request  # noqa: E501

        :return: The request_status of this Request.
        :rtype: str
        """
        return self._request_status

    @request_status.setter
    def request_status(self, request_status: str):
        """Sets the request_status of this Request.

        status of request  # noqa: E501

        :param request_status: The request_status of this Request.
        :type request_status: str
        """
        allowed_values = ["Accepted", "Rejected", "Request", "Cencelled"]  # noqa: E501
        if request_status not in allowed_values:
            raise ValueError(
                "Invalid value for `request_status` ({0}), must be one of {1}"
                .format(request_status, allowed_values)
            )

        self._request_status = request_status

    @property
    def time(self) -> str:
        """Gets the time of this Request.

        Time the service is to be performed  # noqa: E501

        :return: The time of this Request.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time: str):
        """Sets the time of this Request.

        Time the service is to be performed  # noqa: E501

        :param time: The time of this Request.
        :type time: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def trouble(self) -> str:
        """Gets the trouble of this Request.

        problem to solve  # noqa: E501

        :return: The trouble of this Request.
        :rtype: str
        """
        return self._trouble

    @trouble.setter
    def trouble(self, trouble: str):
        """Sets the trouble of this Request.

        problem to solve  # noqa: E501

        :param trouble: The trouble of this Request.
        :type trouble: str
        """
        if trouble is None:
            raise ValueError("Invalid value for `trouble`, must not be `None`")  # noqa: E501

        self._trouble = trouble

    @property
    def member_ate(self) -> MemberATE:
        """Gets the member_ate of this Request.


        :return: The member_ate of this Request.
        :rtype: MemberATE
        """
        return self._member_ate

    @member_ate.setter
    def member_ate(self, member_ate: MemberATE):
        """Sets the member_ate of this Request.


        :param member_ate: The member_ate of this Request.
        :type member_ate: MemberATE
        """
        if member_ate is None:
            raise ValueError("Invalid value for `member_ate`, must not be `None`")  # noqa: E501

        self._member_ate = member_ate

    @property
    def service(self) -> Service:
        """Gets the service of this Request.


        :return: The service of this Request.
        :rtype: Service
        """
        return self._service

    @service.setter
    def service(self, service: Service):
        """Sets the service of this Request.


        :param service: The service of this Request.
        :type service: Service
        """

        self._service = service
