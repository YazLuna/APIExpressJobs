# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.communication_structs.base_model_ import Model
from src.communication_structs.service import Service  # noqa: F401,E501
from src.routes import util


class Resource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, is_main_resource: bool=None, route_save: str=None, name: str=None, service: Service=None):  # noqa: E501
        """Resource - a model defined in Swagger

        :param id: The id of this Resource.  # noqa: E501
        :type id: int
        :param is_main_resource: The is_main_resource of this Resource.  # noqa: E501
        :type is_main_resource: bool
        :param route_save: The route_save of this Resource.  # noqa: E501
        :type route_save: str
        :param name: The name of this Resource.  # noqa: E501
        :type name: str
        :param service: The service of this Resource.  # noqa: E501
        :type service: Service
        """
        self.swagger_types = {
            'id': int,
            'is_main_resource': bool,
            'route_save': str,
            'name': str,
            'service': Service
        }

        self.attribute_map = {
            'id': 'id',
            'is_main_resource': 'isMainResource',
            'route_save': 'routeSave',
            'name': 'name',
            'service': 'service'
        }
        self._id = id
        self._is_main_resource = is_main_resource
        self._route_save = route_save
        self._name = name
        self._service = service

    @classmethod
    def from_dict(cls, dikt) -> 'Resource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Resource of this Resource.  # noqa: E501
        :rtype: Resource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Resource.

        ID of resource  # noqa: E501

        :return: The id of this Resource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Resource.

        ID of resource  # noqa: E501

        :param id: The id of this Resource.
        :type id: int
        """

        self._id = id

    @property
    def is_main_resource(self) -> bool:
        """Gets the is_main_resource of this Resource.

        It is the main resource  # noqa: E501

        :return: The is_main_resource of this Resource.
        :rtype: bool
        """
        return self._is_main_resource

    @is_main_resource.setter
    def is_main_resource(self, is_main_resource: bool):
        """Sets the is_main_resource of this Resource.

        It is the main resource  # noqa: E501

        :param is_main_resource: The is_main_resource of this Resource.
        :type is_main_resource: bool
        """
        if is_main_resource is None:
            raise ValueError("Invalid value for `is_main_resource`, must not be `None`")  # noqa: E501

        self._is_main_resource = is_main_resource

    @property
    def route_save(self) -> str:
        """Gets the route_save of this Resource.

        path where the resource was saved  # noqa: E501

        :return: The route_save of this Resource.
        :rtype: str
        """
        return self._route_save

    @route_save.setter
    def route_save(self, route_save: str):
        """Sets the route_save of this Resource.

        path where the resource was saved  # noqa: E501

        :param route_save: The route_save of this Resource.
        :type route_save: str
        """

        self._route_save = route_save

    @property
    def name(self) -> str:
        """Gets the name of this Resource.

        name of resource  # noqa: E501

        :return: The name of this Resource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Resource.

        name of resource  # noqa: E501

        :param name: The name of this Resource.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def service(self) -> Service:
        """Gets the service of this Resource.


        :return: The service of this Resource.
        :rtype: Service
        """
        return self._service

    @service.setter
    def service(self, service: Service):
        """Sets the service of this Resource.


        :param service: The service of this Resource.
        :type service: Service
        """

        self._service = service
