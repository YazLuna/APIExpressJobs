# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.communication_structs.base_model_ import Model
from src.communication_structs.city import City  # noqa: F401,E501
from src.communication_structs.cost import Cost  # noqa: F401,E501
from src.communication_structs.member_ate import MemberATE  # noqa: F401,E501
from src.routes import util


class Service(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, city: City=None, member_ate: MemberATE=None, name: str=None, minimal_cost: Cost=None, maximum_cost: Cost=None, description_service: str=None, slogan: str=None, type_service: str=None, working_hours: str=None, service_status: str=None):  # noqa: E501
        """Service - a model defined in Swagger

        :param id: The id of this Service.  # noqa: E501
        :type id: int
        :param city: The city of this Service.  # noqa: E501
        :type city: City
        :param member_ate: The member_ate of this Service.  # noqa: E501
        :type member_ate: MemberATE
        :param name: The name of this Service.  # noqa: E501
        :type name: str
        :param minimal_cost: The minimal_cost of this Service.  # noqa: E501
        :type minimal_cost: Cost
        :param maximum_cost: The maximum_cost of this Service.  # noqa: E501
        :type maximum_cost: Cost
        :param description_service: The description_service of this Service.  # noqa: E501
        :type description_service: str
        :param slogan: The slogan of this Service.  # noqa: E501
        :type slogan: str
        :param type_service: The type_service of this Service.  # noqa: E501
        :type type_service: str
        :param working_hours: The working_hours of this Service.  # noqa: E501
        :type working_hours: str
        :param service_status: The service_status of this Service.  # noqa: E501
        :type service_status: str
        """
        self.swagger_types = {
            'id': int,
            'city': City,
            'member_ate': MemberATE,
            'name': str,
            'minimal_cost': Cost,
            'maximum_cost': Cost,
            'description_service': str,
            'slogan': str,
            'type_service': str,
            'working_hours': str,
            'service_status': str
        }

        self.attribute_map = {
            'id': 'id',
            'city': 'city',
            'member_ate': 'memberATE',
            'name': 'name',
            'minimal_cost': 'minimalCost',
            'maximum_cost': 'maximumCost',
            'description_service': 'descriptionService',
            'slogan': 'slogan',
            'type_service': 'typeService',
            'working_hours': 'workingHours',
            'service_status': 'serviceStatus'
        }
        self._id = id
        self._city = city
        self._member_ate = member_ate
        self._name = name
        self._minimal_cost = minimal_cost
        self._maximum_cost = maximum_cost
        self._description_service = description_service
        self._slogan = slogan
        self._type_service = type_service
        self._working_hours = working_hours
        self._service_status = service_status

    @classmethod
    def from_dict(cls, dikt) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Service of this Service.  # noqa: E501
        :rtype: Service
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Service.

        ID of service  # noqa: E501

        :return: The id of this Service.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Service.

        ID of service  # noqa: E501

        :param id: The id of this Service.
        :type id: int
        """

        self._id = id

    @property
    def city(self) -> City:
        """Gets the city of this Service.


        :return: The city of this Service.
        :rtype: City
        """
        return self._city

    @city.setter
    def city(self, city: City):
        """Sets the city of this Service.


        :param city: The city of this Service.
        :type city: City
        """

        self._city = city

    @property
    def member_ate(self) -> MemberATE:
        """Gets the member_ate of this Service.


        :return: The member_ate of this Service.
        :rtype: MemberATE
        """
        return self._member_ate

    @member_ate.setter
    def member_ate(self, member_ate: MemberATE):
        """Sets the member_ate of this Service.


        :param member_ate: The member_ate of this Service.
        :type member_ate: MemberATE
        """

        self._member_ate = member_ate

    @property
    def name(self) -> str:
        """Gets the name of this Service.

        name of sevice  # noqa: E501

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Service.

        name of sevice  # noqa: E501

        :param name: The name of this Service.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def minimal_cost(self) -> Cost:
        """Gets the minimal_cost of this Service.


        :return: The minimal_cost of this Service.
        :rtype: Cost
        """
        return self._minimal_cost

    @minimal_cost.setter
    def minimal_cost(self, minimal_cost: Cost):
        """Sets the minimal_cost of this Service.


        :param minimal_cost: The minimal_cost of this Service.
        :type minimal_cost: Cost
        """
        if minimal_cost is None:
            raise ValueError("Invalid value for `minimal_cost`, must not be `None`")  # noqa: E501

        self._minimal_cost = minimal_cost

    @property
    def maximum_cost(self) -> Cost:
        """Gets the maximum_cost of this Service.


        :return: The maximum_cost of this Service.
        :rtype: Cost
        """
        return self._maximum_cost

    @maximum_cost.setter
    def maximum_cost(self, maximum_cost: Cost):
        """Sets the maximum_cost of this Service.


        :param maximum_cost: The maximum_cost of this Service.
        :type maximum_cost: Cost
        """
        if maximum_cost is None:
            raise ValueError("Invalid value for `maximum_cost`, must not be `None`")  # noqa: E501

        self._maximum_cost = maximum_cost

    @property
    def description_service(self) -> str:
        """Gets the description_service of this Service.

        description of sevice  # noqa: E501

        :return: The description_service of this Service.
        :rtype: str
        """
        return self._description_service

    @description_service.setter
    def description_service(self, description_service: str):
        """Sets the description_service of this Service.

        description of sevice  # noqa: E501

        :param description_service: The description_service of this Service.
        :type description_service: str
        """
        if description_service is None:
            raise ValueError("Invalid value for `description_service`, must not be `None`")  # noqa: E501

        self._description_service = description_service

    @property
    def slogan(self) -> str:
        """Gets the slogan of this Service.

        slogan of sevice  # noqa: E501

        :return: The slogan of this Service.
        :rtype: str
        """
        return self._slogan

    @slogan.setter
    def slogan(self, slogan: str):
        """Sets the slogan of this Service.

        slogan of sevice  # noqa: E501

        :param slogan: The slogan of this Service.
        :type slogan: str
        """
        if slogan is None:
            raise ValueError("Invalid value for `slogan`, must not be `None`")  # noqa: E501

        self._slogan = slogan

    @property
    def type_service(self) -> str:
        """Gets the type_service of this Service.

        type of sevice  # noqa: E501

        :return: The type_service of this Service.
        :rtype: str
        """
        return self._type_service

    @type_service.setter
    def type_service(self, type_service: str):
        """Sets the type_service of this Service.

        type of sevice  # noqa: E501

        :param type_service: The type_service of this Service.
        :type type_service: str
        """
        if type_service is None:
            raise ValueError("Invalid value for `type_service`, must not be `None`")  # noqa: E501

        self._type_service = type_service

    @property
    def working_hours(self) -> str:
        """Gets the working_hours of this Service.

        Service hours  # noqa: E501

        :return: The working_hours of this Service.
        :rtype: str
        """
        return self._working_hours

    @working_hours.setter
    def working_hours(self, working_hours: str):
        """Sets the working_hours of this Service.

        Service hours  # noqa: E501

        :param working_hours: The working_hours of this Service.
        :type working_hours: str
        """
        if working_hours is None:
            raise ValueError("Invalid value for `working_hours`, must not be `None`")  # noqa: E501

        self._working_hours = working_hours

    @property
    def service_status(self) -> str:
        """Gets the service_status of this Service.

        service status  # noqa: E501

        :return: The service_status of this Service.
        :rtype: str
        """
        return self._service_status

    @service_status.setter
    def service_status(self, service_status: str):
        """Sets the service_status of this Service.

        service status  # noqa: E501

        :param service_status: The service_status of this Service.
        :type service_status: str
        """
        allowed_values = ["Active", "Inactive", "BlockedUp"]  # noqa: E501
        if service_status not in allowed_values:
            raise ValueError(
                "Invalid value for `service_status` ({0}), must be one of {1}"
                .format(service_status, allowed_values)
            )

        self._service_status = service_status
