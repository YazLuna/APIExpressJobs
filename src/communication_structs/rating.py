# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.communication_structs.base_model_ import Model
from src.communication_structs.request import Request  # noqa: F401,E501
from src.routes import util


class Rating(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, comment: str=None, rating: int=None, request: Request=None):  # noqa: E501
        """Rating - a model defined in Swagger

        :param id: The id of this Rating.  # noqa: E501
        :type id: int
        :param comment: The comment of this Rating.  # noqa: E501
        :type comment: str
        :param rating: The rating of this Rating.  # noqa: E501
        :type rating: int
        :param request: The request of this Rating.  # noqa: E501
        :type request: Request
        """
        self.swagger_types = {
            'id': int,
            'comment': str,
            'rating': int,
            'request': Request
        }

        self.attribute_map = {
            'id': 'id',
            'comment': 'comment',
            'rating': 'rating',
            'request': 'request'
        }
        self._id = id
        self._comment = comment
        self._rating = rating
        self._request = request

    @classmethod
    def from_dict(cls, dikt) -> 'Rating':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Rating of this Rating.  # noqa: E501
        :rtype: Rating
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Rating.

        ID of rating  # noqa: E501

        :return: The id of this Rating.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Rating.

        ID of rating  # noqa: E501

        :param id: The id of this Rating.
        :type id: int
        """

        self._id = id

    @property
    def comment(self) -> str:
        """Gets the comment of this Rating.

        comment of ranting  # noqa: E501

        :return: The comment of this Rating.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this Rating.

        comment of ranting  # noqa: E501

        :param comment: The comment of this Rating.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501

        self._comment = comment

    @property
    def rating(self) -> int:
        """Gets the rating of this Rating.

        rating  # noqa: E501

        :return: The rating of this Rating.
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating: int):
        """Sets the rating of this Rating.

        rating  # noqa: E501

        :param rating: The rating of this Rating.
        :type rating: int
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")  # noqa: E501

        self._rating = rating

    @property
    def request(self) -> Request:
        """Gets the request of this Rating.


        :return: The request of this Rating.
        :rtype: Request
        """
        return self._request

    @request.setter
    def request(self, request: Request):
        """Sets the request of this Rating.


        :param request: The request of this Rating.
        :type request: Request
        """

        self._request = request
