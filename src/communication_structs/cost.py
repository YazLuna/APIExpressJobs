# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.communication_structs.base_model_ import Model
from src.routes import util


class Cost(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, cost: float=None, currency: str=None):  # noqa: E501
        """Cost - a model defined in Swagger

        :param id: The id of this Cost.  # noqa: E501
        :type id: int
        :param cost: The cost of this Cost.  # noqa: E501
        :type cost: float
        :param currency: The currency of this Cost.  # noqa: E501
        :type currency: str
        """
        self.swagger_types = {
            'id': int,
            'cost': float,
            'currency': str
        }

        self.attribute_map = {
            'id': 'id',
            'cost': 'cost',
            'currency': 'currency'
        }
        self._id = id
        self._cost = cost
        self._currency = currency

    @classmethod
    def from_dict(cls, dikt) -> 'Cost':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Cost of this Cost.  # noqa: E501
        :rtype: Cost
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Cost.

        Id of Cost  # noqa: E501

        :return: The id of this Cost.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Cost.

        Id of Cost  # noqa: E501

        :param id: The id of this Cost.
        :type id: int
        """

        self._id = id

    @property
    def cost(self) -> float:
        """Gets the cost of this Cost.

        cost  # noqa: E501

        :return: The cost of this Cost.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost: float):
        """Sets the cost of this Cost.

        cost  # noqa: E501

        :param cost: The cost of this Cost.
        :type cost: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")  # noqa: E501

        self._cost = cost

    @property
    def currency(self) -> str:
        """Gets the currency of this Cost.

        currency of cost  # noqa: E501

        :return: The currency of this Cost.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this Cost.

        currency of cost  # noqa: E501

        :param currency: The currency of this Cost.
        :type currency: str
        """
        allowed_values = ["MXN"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency
