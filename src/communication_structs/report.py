# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.communication_structs.base_model_ import Model
from src.communication_structs.member_ate import MemberATE  # noqa: F401,E501
from src.communication_structs.service import Service  # noqa: F401,E501
from src.routes import util


class Report(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, reason: str=None, service: Service=None, member_ate: MemberATE=None):  # noqa: E501
        """Report - a model defined in Swagger

        :param id: The id of this Report.  # noqa: E501
        :type id: int
        :param reason: The reason of this Report.  # noqa: E501
        :type reason: str
        :param service: The service of this Report.  # noqa: E501
        :type service: Service
        :param member_ate: The member_ate of this Report.  # noqa: E501
        :type member_ate: MemberATE
        """
        self.swagger_types = {
            'id': int,
            'reason': str,
            'service': Service,
            'member_ate': MemberATE
        }

        self.attribute_map = {
            'id': 'id',
            'reason': 'reason',
            'service': 'service',
            'member_ate': 'memberATE'
        }
        self._id = id
        self._reason = reason
        self._service = service
        self._member_ate = member_ate

    @classmethod
    def from_dict(cls, dikt) -> 'Report':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Report of this Report.  # noqa: E501
        :rtype: Report
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Report.

        ID of report  # noqa: E501

        :return: The id of this Report.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Report.

        ID of report  # noqa: E501

        :param id: The id of this Report.
        :type id: int
        """

        self._id = id

    @property
    def reason(self) -> str:
        """Gets the reason of this Report.

        reason of report  # noqa: E501

        :return: The reason of this Report.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason: str):
        """Sets the reason of this Report.

        reason of report  # noqa: E501

        :param reason: The reason of this Report.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason

    @property
    def service(self) -> Service:
        """Gets the service of this Report.


        :return: The service of this Report.
        :rtype: Service
        """
        return self._service

    @service.setter
    def service(self, service: Service):
        """Sets the service of this Report.


        :param service: The service of this Report.
        :type service: Service
        """

        self._service = service

    @property
    def member_ate(self) -> MemberATE:
        """Gets the member_ate of this Report.


        :return: The member_ate of this Report.
        :rtype: MemberATE
        """
        return self._member_ate

    @member_ate.setter
    def member_ate(self, member_ate: MemberATE):
        """Sets the member_ate of this Report.


        :param member_ate: The member_ate of this Report.
        :type member_ate: MemberATE
        """

        self._member_ate = member_ate
