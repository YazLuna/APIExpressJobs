# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.communication_structs.base_model_ import Model
from src.communication_structs.member_ate import MemberATE  # noqa: F401,E501
from src.communication_structs.request import Request  # noqa: F401,E501
from src.routes import util


class Message(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, request: Request=None, owner: MemberATE=None, message: str=None):  # noqa: E501
        """Message - a model defined in Swagger

        :param id: The id of this Message.  # noqa: E501
        :type id: int
        :param request: The request of this Message.  # noqa: E501
        :type request: Request
        :param owner: The owner of this Message.  # noqa: E501
        :type owner: MemberATE
        :param message: The message of this Message.  # noqa: E501
        :type message: str
        """
        self.swagger_types = {
            'id': int,
            'request': Request,
            'owner': MemberATE,
            'message': str
        }

        self.attribute_map = {
            'id': 'id',
            'request': 'request',
            'owner': 'owner',
            'message': 'message'
        }
        self._id = id
        self._request = request
        self._owner = owner
        self._message = message

    @classmethod
    def from_dict(cls, dikt) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Message of this Message.  # noqa: E501
        :rtype: Message
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Message.

        ID of message  # noqa: E501

        :return: The id of this Message.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Message.

        ID of message  # noqa: E501

        :param id: The id of this Message.
        :type id: int
        """

        self._id = id

    @property
    def request(self) -> Request:
        """Gets the request of this Message.


        :return: The request of this Message.
        :rtype: Request
        """
        return self._request

    @request.setter
    def request(self, request: Request):
        """Sets the request of this Message.


        :param request: The request of this Message.
        :type request: Request
        """

        self._request = request

    @property
    def owner(self) -> MemberATE:
        """Gets the owner of this Message.


        :return: The owner of this Message.
        :rtype: MemberATE
        """
        return self._owner

    @owner.setter
    def owner(self, owner: MemberATE):
        """Sets the owner of this Message.


        :param owner: The owner of this Message.
        :type owner: MemberATE
        """

        self._owner = owner

    @property
    def message(self) -> str:
        """Gets the message of this Message.

        message of Service or MemberATE  # noqa: E501

        :return: The message of this Message.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Message.

        message of Service or MemberATE  # noqa: E501

        :param message: The message of this Message.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message
