# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.communication_structs.base_model_ import Model
from src.communication_structs.account import Account  # noqa: F401,E501
from src.routes import util


class AccountType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, account_status: str=None, account_type: str=None, account: Account=None):  # noqa: E501
        """AccountType - a model defined in Swagger

        :param id: The id of this AccountType.  # noqa: E501
        :type id: int
        :param account_status: The account_status of this AccountType.  # noqa: E501
        :type account_status: str
        :param account_type: The account_type of this AccountType.  # noqa: E501
        :type account_type: str
        :param account: The account of this AccountType.  # noqa: E501
        :type account: Account
        """
        self.swagger_types = {
            'id': int,
            'account_status': str,
            'account_type': str,
            'account': Account
        }

        self.attribute_map = {
            'id': 'id',
            'account_status': 'accountStatus',
            'account_type': 'accountType',
            'account': 'account'
        }
        self._id = id
        self._account_status = account_status
        self._account_type = account_type
        self._account = account

    @classmethod
    def from_dict(cls, dikt) -> 'AccountType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountType of this AccountType.  # noqa: E501
        :rtype: AccountType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this AccountType.

        ID of accountType  # noqa: E501

        :return: The id of this AccountType.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this AccountType.

        ID of accountType  # noqa: E501

        :param id: The id of this AccountType.
        :type id: int
        """

        self._id = id

    @property
    def account_status(self) -> str:
        """Gets the account_status of this AccountType.

        status of account  # noqa: E501

        :return: The account_status of this AccountType.
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status: str):
        """Sets the account_status of this AccountType.

        status of account  # noqa: E501

        :param account_status: The account_status of this AccountType.
        :type account_status: str
        """
        allowed_values = ["Active", "Inactive", "BlockedUp"]  # noqa: E501
        if account_status not in allowed_values:
            raise ValueError(
                "Invalid value for `account_status` ({0}), must be one of {1}"
                .format(account_status, allowed_values)
            )

        self._account_status = account_status

    @property
    def account_type(self) -> str:
        """Gets the account_type of this AccountType.

        type of account  # noqa: E501

        :return: The account_type of this AccountType.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type: str):
        """Sets the account_type of this AccountType.

        type of account  # noqa: E501

        :param account_type: The account_type of this AccountType.
        :type account_type: str
        """
        allowed_values = ["Client", "Employee", "Manager"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def account(self) -> Account:
        """Gets the account of this AccountType.


        :return: The account of this AccountType.
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account: Account):
        """Sets the account of this AccountType.


        :param account: The account of this AccountType.
        :type account: Account
        """

        self._account = account
