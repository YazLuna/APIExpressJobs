# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from src.communication_structs.base_model_ import Model
from src.communication_structs.member_ate import MemberATE  # noqa: F401,E501
from src.routes import util


class Account(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id_account: int = None, username: str = None, password: str = None,
                 member_ate: MemberATE = None):  # noqa: E501
        """Account - a model defined in Swagger

        :param id_account: The id_account of this Account.  # noqa: E501
        :type id_account: int
        :param username: The username of this Account.  # noqa: E501
        :type username: str
        :param password: The password of this Account.  # noqa: E501
        :type password: str
        :param member_ate: The member_ate of this Account.  # noqa: E501
        :type member_ate: MemberATE
        """
        self.swagger_types = {
            'id_account': int,
            'username': str,
            'password': str,
            'member_ate': MemberATE
        }

        self.attribute_map = {
            'id_account': 'idAccount',
            'username': 'username',
            'password': 'password',
            'member_ate': 'memberATE'
        }
        self._id_account = id_account
        self._username = username
        self._password = password
        self._member_ate = member_ate

    @classmethod
    def from_dict(cls, dikt) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Account of this Account.  # noqa: E501
        :rtype: Account
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_account(self) -> int:
        """Gets the id_account of this Account.

        ID of account  # noqa: E501

        :return: The id_account of this Account.
        :rtype: int
        """
        return self._id_account

    @id_account.setter
    def id_account(self, id_account: int):
        """Sets the id_account of this Account.

        ID of account  # noqa: E501

        :param id_account: The id_account of this Account.
        :type id_account: int
        """
        if id_account is None:
            raise ValueError("Invalid value for `id_account`, must not be `None`")  # noqa: E501

        self._id_account = id_account

    @property
    def username(self) -> str:
        """Gets the username of this Account.

        username of account  # noqa: E501

        :return: The username of this Account.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this Account.

        username of account  # noqa: E501

        :param username: The username of this Account.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this Account.

        encrypted password  # noqa: E501

        :return: The password of this Account.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this Account.

        encrypted password  # noqa: E501

        :param password: The password of this Account.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def member_ate(self) -> MemberATE:
        """Gets the member_ate of this Account.


        :return: The member_ate of this Account.
        :rtype: MemberATE
        """
        return self._member_ate

    @member_ate.setter
    def member_ate(self, member_ate: MemberATE):
        """Sets the member_ate of this Account.


        :param member_ate: The member_ate of this Account.
        :type member_ate: MemberATE
        """

        self._member_ate = member_ate
