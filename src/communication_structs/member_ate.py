# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.communication_structs.base_model_ import Model
from swagger_server.models.city import City  # noqa: F401,E501
from swagger_server.models.resource import Resource  # noqa: F401,E501
from src.routes import util


class MemberATE(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, email: str=None, date_birth: date=None, last_name: str=None, name: str=None, resource: Resource=None, city: City=None):  # noqa: E501
        """MemberATE - a model defined in Swagger

        :param id: The id of this MemberATE.  # noqa: E501
        :type id: int
        :param email: The email of this MemberATE.  # noqa: E501
        :type email: str
        :param date_birth: The date_birth of this MemberATE.  # noqa: E501
        :type date_birth: date
        :param last_name: The last_name of this MemberATE.  # noqa: E501
        :type last_name: str
        :param name: The name of this MemberATE.  # noqa: E501
        :type name: str
        :param resource: The resource of this MemberATE.  # noqa: E501
        :type resource: Resource
        :param city: The city of this MemberATE.  # noqa: E501
        :type city: City
        """
        self.swagger_types = {
            'id': int,
            'email': str,
            'date_birth': date,
            'last_name': str,
            'name': str,
            'resource': Resource,
            'city': City
        }

        self.attribute_map = {
            'id': 'id',
            'email': 'email',
            'date_birth': 'dateBirth',
            'last_name': 'lastName',
            'name': 'name',
            'resource': 'resource',
            'city': 'city'
        }
        self._id = id
        self._email = email
        self._date_birth = date_birth
        self._last_name = last_name
        self._name = name
        self._resource = resource
        self._city = city

    @classmethod
    def from_dict(cls, dikt) -> 'MemberATE':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MemberATE of this MemberATE.  # noqa: E501
        :rtype: MemberATE
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this MemberATE.

        ID of MemberATE  # noqa: E501

        :return: The id of this MemberATE.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this MemberATE.

        ID of MemberATE  # noqa: E501

        :param id: The id of this MemberATE.
        :type id: int
        """

        self._id = id

    @property
    def email(self) -> str:
        """Gets the email of this MemberATE.

        Email of MemberATE  # noqa: E501

        :return: The email of this MemberATE.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this MemberATE.

        Email of MemberATE  # noqa: E501

        :param email: The email of this MemberATE.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def date_birth(self) -> date:
        """Gets the date_birth of this MemberATE.

        Date birth of MemberATE  # noqa: E501

        :return: The date_birth of this MemberATE.
        :rtype: date
        """
        return self._date_birth

    @date_birth.setter
    def date_birth(self, date_birth: date):
        """Sets the date_birth of this MemberATE.

        Date birth of MemberATE  # noqa: E501

        :param date_birth: The date_birth of this MemberATE.
        :type date_birth: date
        """
        if date_birth is None:
            raise ValueError("Invalid value for `date_birth`, must not be `None`")  # noqa: E501

        self._date_birth = date_birth

    @property
    def last_name(self) -> str:
        """Gets the last_name of this MemberATE.

        lastName of MemberATE  # noqa: E501

        :return: The last_name of this MemberATE.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this MemberATE.

        lastName of MemberATE  # noqa: E501

        :param last_name: The last_name of this MemberATE.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def name(self) -> str:
        """Gets the name of this MemberATE.

        name of MemberATE  # noqa: E501

        :return: The name of this MemberATE.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this MemberATE.

        name of MemberATE  # noqa: E501

        :param name: The name of this MemberATE.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def resource(self) -> Resource:
        """Gets the resource of this MemberATE.


        :return: The resource of this MemberATE.
        :rtype: Resource
        """
        return self._resource

    @resource.setter
    def resource(self, resource: Resource):
        """Sets the resource of this MemberATE.


        :param resource: The resource of this MemberATE.
        :type resource: Resource
        """

        self._resource = resource

    @property
    def city(self) -> City:
        """Gets the city of this MemberATE.


        :return: The city of this MemberATE.
        :rtype: City
        """
        return self._city

    @city.setter
    def city(self, city: City):
        """Sets the city of this MemberATE.


        :param city: The city of this MemberATE.
        :type city: City
        """

        self._city = city
